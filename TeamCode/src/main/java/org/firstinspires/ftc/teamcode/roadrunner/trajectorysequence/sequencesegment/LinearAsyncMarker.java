package org.firstinspires.ftc.teamcode.roadrunner.trajectorysequence.sequencesegment;import com.acmerobotics.roadrunner.geometry.Pose2d;import com.acmerobotics.roadrunner.trajectory.TrajectoryMarker;import org.firstinspires.ftc.teamcode.roadrunner.trajectorysequence.ActiveLinearAsyncManager;import java.util.List;/** * Marker that starts a function on another thread, the follower will only * wait (when waitForFinish==true) after its TrajectorySegment is completed */public class LinearAsyncMarker extends SequenceSegment {    private String name;    private Runnable function;    private boolean isWait;    public LinearAsyncMarker(String name, Runnable asyncAction, Pose2d startPose, List<TrajectoryMarker> markers) {        super("LINEAR_ASYNC_START", 0, startPose, startPose, markers);        this.name = name;        this.function = asyncAction;        this.isWait = false;    }    public LinearAsyncMarker(String name, Pose2d startPose, List<TrajectoryMarker> markers) {        super("WAITING_FOR_LINEAR_ASYNC_END", 0, startPose, startPose, markers);        this.name = name;        this.function = null;        this.isWait = true;    }    public boolean isWaitSegment() {        return isWait;    }    public boolean start() {        return ActiveLinearAsyncManager.add(name, function);    }    public boolean isFinished() {        return ActiveLinearAsyncManager.isFinished(name);    }    @Override    public Pose2d getPose(double time) {        return getStartPose();    }}